/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Aggregate Javadoc is not published to Maven Central. Each Java module that is published
 * to Maven Cental packages its own Javadoc. To generate aggregated javadocs, run:
 *   ./gradlew :sdks:java:javadoc:aggregateJavadoc
 * Generated files will be located under beam/sdks/java/javadoc/build/docs/javadoc and are
 * used as part of the beam-site source tree.
 */
plugins { id 'org.apache.beam.module' }
applyJavaNature(publish: false)
description = "Apache Beam :: SDKs :: Java :: Aggregated Javadoc"

// The following dependencies are excluded from javadoc external link due to
// "Error fetching URL" in Java11+
def excludedFromLink = [
    'com.azure/azure-sdk-bom',
    'io.cdap.cdap/cdap-api-common',
    'io.cdap.cdap/cdap-common',
    'io.cdap.cdap/cdap-etl-api-spark',
    'io.cdap/hubspot-plugins',
    'io.cdap.plugin/salesforce-plugins',
    'io.cdap.plugin/servicenow-plugins',
    'io.cdap.plugin/zendesk-plugins',
    'com.google.api-ads/google-ads-stubs-v17',
    'com.google.api-client/google-api-client-java6',
    'com.google.apis/google-api-services-cloudresourcemanager',
    'com.google.apis/google-api-services-healthcare',
    'com.google.cloud.dataflow/google-cloud-dataflow-java-proto-library-all',
    'com.google.cloud/libraries-bom',
    'org.apache.hadoop/hadoop-client',
    'org.apache.hadoop/hadoop-minicluster',
    'com.fasterxml.jackson.module/jackson-module-scala_2.11',
    'com.fasterxml.jackson.module/jackson-module-scala_2.12',
    'com.github.jbellis/jamm',
    'org.apache.logging.log4j/log4j-to-slf4j',
    'org.apache.logging.log4j/log4j-slf4j-impl',
    'org.mockito/mockito-inline',
    'org.apache.nemo/nemo-compiler-frontend-beam',
    'io.netty/netty-all',
    'io.netty/netty-tcnative-boringssl-static',
    'io.netty/netty-transport-native-epoll',
    'com.singlestore/singlestore-jdbc-client',
    'com.solacesystems/sol-jcsmp',
    'org.apache.spark/spark-core_2.11',
    'org.apache.spark/spark-streaming_2.11',
    'org.apache.spark/spark-core_2.12',
    'org.apache.spark/spark-network-common_2.12',
    'org.apache.spark/spark-sql_2.12',
    'org.apache.spark/spark-streaming_2.12',
    'org.apache.tephra/tephra-api',
    'org.testcontainers/azure',
    'org.testcontainers/gcloud',
    'org.testcontainers/solace',
    'org.apache.beam/beam-vendor-grpc-1_60_1',
    'org.apache.beam/beam-vendor-guava-32_1_2-jre',
    'org.apache.beam/beam-vendor-calcite-1_28_0',
    'org.codehaus.woodstox/woodstox-core-asl',
    'org.apache.arrow/arrow-memory-core',
    'org.apache.arrow/arrow-memory-netty',
    'org.hamcrest/hamcrest',
]

for (p in rootProject.subprojects) {
  if (!p.path.equals(project.path) && !p.path.startsWith(':sdks:java:bom')) {
    evaluationDependsOn(p.path)
  }
}

ext.getExportedJavadocProjects = {
  def exportedJavadocProjects = new ArrayList<>();
  for (p in rootProject.subprojects) {
    if (!p.path.equals(project.path) && !p.path.startsWith(':sdks:java:bom')) {
      def subproject = p // project(':' + p.name)
      if (subproject.ext.properties.containsKey('exportJavadoc') &&
          subproject.ext.properties.exportJavadoc) {
        exportedJavadocProjects.add(p.path)
      }
    }
  }
  return exportedJavadocProjects
}

task allJavadoc() {
  def exportedJavadocProjects = getExportedJavadocProjects()
  dependsOn exportedJavadocProjects.collect { "$it:javadoc" }
}

task aggregateJavadoc(type: Javadoc) {
  def createJavadocIOUrlForDependency = {
    def dependency = dependencies.create(it)
    def identifier = dependency.getGroup() + '/' + dependency.getName()
    if (excludedFromLink.contains(identifier)) {
      return ''
    }
    def url = 'https://static.javadoc.io/' + identifier
    if (dependency.getVersion() != null) {
      url += '/' + dependency.getVersion()
    }
    return url
  }

  def exportedJavadocProjects = getExportedJavadocProjects()
  source exportedJavadocProjects.collect { project(it).sourceSets.main.allJava }
  classpath = files(exportedJavadocProjects.collect { project(it).sourceSets.main.runtimeClasspath })
  destinationDir = file("${buildDir}/docs/javadoc")
  failOnError = true

  exclude "org/apache/beam/examples/*"
  exclude "org/apache/beam/fn/harness/*"
  exclude "org/apache/beam/runners/core/*"
  exclude "org/apache/beam/runners/dataflow/internal/*"
  exclude "org/apache/beam/runners/flink/examples/*"
  exclude "org/apache/beam/runners/flink/translation/*"
  exclude "org/apache/beam/runners/spark/examples/*"
  exclude "org/apache/beam/runners/spark/translation/*"
  exclude "org/apache/beam/sdk/transforms/reflect/*"
  exclude "org/apache/beam/sdk/runners/*"
  exclude "org/apache/beam/sdk/util/*"

  options.with {
    title "Apache Beam " + project.version
    overview 'overview.html'
    for (dep in project.library.java.values()) {
      def link = createJavadocIOUrlForDependency(dep)
      if (!link.isEmpty()) {
        links link
      }
    }
  }
}
